### set log levels ###
log4j.rootLogger=debug ,  stdout ,  D ,  E
### 输出到控制台 ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[light2019] %d{yyyy MM dd HH:mm:ss,SS} %5p  - %m%n

### 输出到日志文件 ###
log4j.appender.D=org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File=logs/debug.log
log4j.appender.D.DatePattern='_'yyyy-MM-dd'.log'
log4j.appender.D.Append=true
## 输出DEBUG级别以上的日志
log4j.appender.D.Threshold=DEBUG
log4j.appender.D.layout=org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern=[light2019] %d{yyyy MM dd HH:mm:ss,SS} - [ %p ]  %m%n

### 保存异常信息到单独文件 ###
log4j.appender.E=org.apache.log4j.DailyRollingFileAppender
## 异常日志文件名
log4j.appender.E.File=logs/error.log 
log4j.appender.E.DatePattern='_'yyyy-MM-dd'.log'
log4j.appender.E.Append=true
## 只输出ERROR级别以上的日志!!!
log4j.appender.E.Threshold=ERROR
log4j.appender.E.layout=org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern=[light2019] %d{yyyy MM dd HH:mm:ss,SS} - [ %p ]  %m%n

## c  category的名称，可使用｛n}限制输出的精度。例如：logger名为"a.b.c"，%c{2}将输出"b.c"。
## C  产生log事件的java完全限定类名。可使用｛n}限制输出的精度。例如：“org.apache.xyz.SomeClass”,%C{2}将输出“SomeClass”。
## d  时间和日期的输出格式，例如：%d{yyyy MM dd HH:mm:ss,SS}，可不带后面的日期格式字符。
## F  产生log事件的java源文件名，带“.java”后缀及包名称。
## l  log发生位置的详细描述，包括方法名、文件名及行号。
## L  log发生在源文件中的位置。
## m  log事件的消息内容。
## M  log发生时所在的方法名称。
## n  根据所运行的平台输出相应的行分隔字符。
## p  log事件的级别。
## r  自程序运行至log事件产生所经过的时间。
## t  产生log的线程名称。